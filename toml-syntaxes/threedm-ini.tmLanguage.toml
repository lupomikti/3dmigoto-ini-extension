"$schema" = "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
version = "0.4.0"
scopeName = "source.ini.3dm"
name = "3dm-ini"
fileTypes = ["ini"]
patterns = [
    {include = "#namespace"},
    {include = "#comment"},
    {include = "#section"},
]

[repository.namespace]
name = "meta.head.namespace.ini.3dm"
begin = '(?i)^(?=namespace)'
end = '$|\n'

[[repository.namespace.patterns]]
begin = '(?i)(namespace)\b\s*(=)\s*\b'
end = '$|\n'
beginCaptures.1.name = "keyword.other.namespace.definition.ini.3dm"
beginCaptures.2.name = "keyword.operator.namespace.ini.3dm"
patterns = [{name = "entity.name.namespace.ini.3dm", match = '(?i)[\w\-.]+(?:[\\/][\w\-.]+)*'}]

[repository.comment]
begin = '(?i)(?=^.*?;)'
end = '$|\n'

[[repository.comment.patterns]]
name = "comment.line.semicolon.ini.3dm"
match = '(?i)^([ \t]+)?(;)(.*)$'
captures.1.name = "punctuation.whitespace.comment.leading.ini.3dm"
captures.2.name = "punctuation.definition.comment.ini.3dm"
captures.3.name = "comment.line.semicolon.content.ini.3dm"

[[repository.comment.patterns]]
name = "invalid.illegal"
match = '(?i)^(.+)(;)([\S ]+)$'
captures.2.name = "punctuation.definition.comment.ini.3dm"
captures.3.name = "comment.line.semicolon.content.ini.3dm"

[repository.section]
name = "meta.structure.section.ini.3dm"
# The insanity below is necessary for the ShaderRegex Pattern matching section to not break the whole file
# Without this, character class sets that would match a more broad section regex would be treated as section titles
# So we must explicitly define the allowed section names in the begin and end matches
begin = '''(?xi)
(?:^(\[) # capture group 1
    ((?:
        (?:Constants|Present|Logging|Hunting|System|Device|Profile|Stereo|Rendering|ConvergenceMap|Loader|ClearRenderTargetView|ClearDepthStencilView|ClearUnorderedAccessView(?:Uint|Float)) |
        (?:Key|TextureOverride|ShaderOverride|(?:BuiltIn)?(?:CustomShader|CommandList)|Resource|ShaderRegex|Preset).+ |
        Include.*
     )
    )    # capture group 2
    (\]) # capture group 3
[ \t]*$)
(?<=^\[\2\][ \t]*$)'''
end = '''(?xi)
(?=^\[
(?:
  (?:Constants|Present|Logging|Hunting|System|Device|Profile|Stereo|Rendering|ConvergenceMap|Loader|ClearRenderTargetView|ClearDepthStencilView|ClearUnorderedAccessView(?:Uint|Float)) |
  (?:Key|TextureOverride|ShaderOverride|(?:BuiltIn)?(?:CustomShader|CommandList)|Resource|ShaderRegex|Preset).+ |
  Include.*
)
\][ \t]*$|\z)''' # \z is there to match the end of the file
beginCaptures.1.name = "punctuation.definition.entity.ini.3dm"
beginCaptures.2.name = "entity.name.section.group-title.ini.3dm"
beginCaptures.2.patterns = [
    {match = '(?i)Constants', name = "entity.name.section.group-title.ini.3dm.constants"},
    {match = '(?i)Present', name = "entity.name.section.group-title.ini.3dm.present"},
    {match = '(?i)Key.+', name = "entity.name.section.group-title.ini.3dm.key"},
    {match = '(?i)TextureOverride.+', name = "entity.name.section.group-title.ini.3dm.texture-override"},
    {match = '(?i)ShaderOverride.+', name = "entity.name.section.group-title.ini.3dm.shader-override"},
    {match = '(?i)(?:BuiltIn)?CustomShader.+', name = "entity.name.section.group-title.ini.3dm.custom-shader"},
    {match = '(?i)(?:BuiltIn)?CommandList.+', name = "entity.name.section.group-title.ini.3dm.command-list"},
    {match = '(?i)Resource.+', name = "entity.name.section.group-title.ini.3dm.resource"},
    {match = '(?i)ShaderRegex.+', name = "entity.name.section.group-title.ini.3dm.shader-regex"},
    {match = '(?i)Include.*', name = "entity.name.section.group-title.ini.3dm.include"},
    {match = '(?i)Logging', name = "entity.name.section.group-title.ini.3dm.logging"},
    {match = '(?i)Hunting', name = "entity.name.section.group-title.ini.3dm.hunting"},
    {match = '(?i)System', name = "entity.name.section.group-title.ini.3dm.system"},
    {match = '(?i)Device', name = "entity.name.section.group-title.ini.3dm.device"},
    {match = '(?i)Profile', name = "entity.name.section.group-title.ini.3dm.profile"},
    {match = '(?i)Stereo', name = "entity.name.section.group-title.ini.3dm.stereo"},
    {match = '(?i)Rendering', name = "entity.name.section.group-title.ini.3dm.rendering"},
    {match = '(?i)ConvergenceMap', name = "entity.name.section.group-title.ini.3dm.convergence-map"},
    {match = '(?i)Preset.+', name = "entity.name.section.group-title.ini.3dm.preset"},
    {match = '(?i)Loader', name = "entity.name.section.group-title.ini.3dm.loader"},
    {match = '(?i)ClearRenderTargetView', name = "entity.name.section.group-title.ini.3dm.clear-render-target-view"},
    {match = '(?i)ClearDepthStencilView', name = "entity.name.section.group-title.ini.3dm.clear-depth-stencil-view"},
    {match = '(?i)ClearUnorderedAccessView(?:Uint|Float)', name = "entity.name.section.group-title.ini.3dm.clear-unordered-access-view"},
]
beginCaptures.3.name = "punctuation.definition.entity.ini.3dm"

[[repository.section.patterns]]
name = "meta.structure.section.constants.ini.3dm"
begin = '(?i)(?<=^\[Constants\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
    {include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.present.ini.3dm"
begin = '(?i)(?<=^\[Present\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.key.ini.3dm"
begin = '(?i)(?<=^\[Key.+\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    # comment must be last here to allow for ; to be used as a hotkey value without being treated as an invalid comment
    {include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
	{include = "#comment"},
]

[[repository.section.patterns]]
name = "meta.structure.section.texture-override.ini.3dm"
begin = '(?i)(?<=^\[TextureOverride.+\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.shader-override.ini.3dm"
begin = '(?i)(?<=^\[ShaderOverride.+\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.custom-shader.ini.3dm"
begin = '(?i)(?<=^\[(?:BuiltIn)?CustomShader.+\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.command-list.ini.3dm"
begin = '(?i)(?<=^\[(?:BuiltIn)?CommandList.+\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.resource.ini.3dm"
begin = '(?i)(?<=^\[Resource.+\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.shader-regex-pattern.ini.3dm"
begin = '(?i)(?<=^\[ShaderRegex.+\.Pattern\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
contentName = "meta.embedded.block.regexp"
patterns = [
    {include = "#comment"},
	{include = "source.regexp"},
]

[[repository.section.patterns]]
name = "meta.structure.section.shader-regex-replace.ini.3dm"
begin = '(?i)(?<=^\[ShaderRegex.+\.Pattern\.Replace\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
# contentName = "meta.embedded.block.regexp-replace"
patterns = [
    {include = "#comment"},
	{include = "source.regexp-replace"},
]

[[repository.section.patterns]]
name = "meta.structure.section.shader-regex.ini.3dm"
begin = '(?i)(?<!^\[ShaderRegex.+\.Pattern.*\]$)(?<=^\[ShaderRegex.+\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.include.ini.3dm"
begin = '(?i)(?<=^\[Include.*\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.preset.ini.3dm"
begin = '(?i)(?<=^\[Preset.+\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.logging.ini.3dm"
begin = '(?i)(?<=^\[Logging\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.hunting.ini.3dm"
begin = '(?i)(?<=^\[Hunting\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    # Same as with the Key* section, comment is last to allow for ; to not be treated as an invalid comment for the hotkeys
	{include = "#definition"},
    {include = "#comment"},
]

[[repository.section.patterns]]
name = "meta.structure.section.system.ini.3dm"
begin = '(?i)(?<=^\[System\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.device.ini.3dm"
begin = '(?i)(?<=^\[Device\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.stereo.ini.3dm"
begin = '(?i)(?<=^\[Stereo\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.rendering.ini.3dm"
begin = '(?i)(?<=^\[Rendering\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.profile.ini.3dm"
begin = '(?i)(?<=^\[Profile\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.convergence-map.ini.3dm"
begin = '(?i)(?<=^\[ConvergenceMap\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.loader.ini.3dm"
begin = '(?i)(?<=^\[Loader\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#definition"},
]

[[repository.section.patterns]]
name = "meta.structure.section.clear-render-target-view.ini.3dm"
begin = '(?i)(?<=^\[ClearRenderTargetView\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.clear-depth-stencil-view.ini.3dm"
begin = '(?i)(?<=^\[ClearDepthStencilView\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[[repository.section.patterns]]
name = "meta.structure.section.clear-unordered-access-view.ini.3dm"
begin = '(?i)(?<=^\[ClearUnorderedAccessView(?:Uint|Float)\][ \t]*$)'
end = '(?i)(?=^\[.+\][ \t]*$|\z)'
patterns = [
    {include = "#comment"},
	{include = "#conditional-expression"},
	{include = "#definition"},
	{include = "#declaration"},
]

[repository.conditional-expression]
name = "meta.expression.conditional.ini.3dm"
begin = '(?i)^[ \t]*(?:(if|elif|else if)(?= )|(else[ \t]*$|endif[ \t]*$))'
beginCaptures.1.name = "keyword.control.flow.ini.3dm"
beginCaptures.2.name = "keyword.control.flow.ini.3dm"
end = '$|\n'
contentName = "meta.expression.operational.ini.3dm"
patterns = [{include = "#operational-expression"}]

[repository.definition]
name = "meta.structure.definition.ini.3dm"
match = '''(?xi)
^[ \t]* (\w+) # optional whitespace followed by a word-like
\s* (=) \s* # kvp separator surrounded by optional whitespace
([@\w\$.\-,+/* \t%=\\!><"\[\]';:|&()]*) # Rvalue, optional
(?:$|\n)'''
captures.1.patterns = [{include = "#Lword"}]
captures.2.name = "punctuation.separator.key-value.ini.3dm"
captures.3.patterns = [{include = "#Rvalue"}]

[repository.declaration]
name = "meta.structure.declaration.ini.3dm"
# Start of line -> optional whitespace -> (0 to 2 keywords -> keyword/variable/constant) -> optional whitespace -> = -> optional whitespace -> Rvalue -> end of line
match = '''(?xi)
^[ \t]* # optional leading whitespace
(
  (?:(?:\w+)\ +){0,2}     # between 0 and 2 keywords inclusive
  (?:[$\w\-.\\/@ '\[\]]+) # another keyword, a variable, or a constant
)
\s*
(?:
  (=) \s* # assignment/declaration operator, surrounded by optional whitespace
  ([=$!@\w.\-,+/* \t%\\()"|&><]+) # Rvalue
)? # Operator and Rvalue are optional, e.g. `global $variable` on a line by itself
(?:$|\n)'''
captures.1.patterns = [{include = "#Lexpression"}]
captures.2.name = "keyword.operator.declaration.ini.3dm"
captures.3.patterns = [{include = "#Rvalue"}]

[repository.Lword]
patterns = [
    {name = "meta.keyword.lword keyword.other.ini.3dm.multi-section", match = '(?i)\b(separation|convergence|hash|filter_index|match_priority|run|condition|format|(?:width|height)(?:_multiply)?|type)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.command-list.general", match = '(?i)\b(checktextureoverride|(?:exclude_)?preset|handling|reset_per_frame_limits|clear|direct_mode_eye|analyse_options|dump|special|store)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.command-list.draw-instruction", match = '(?i)\b(draw(?:indexed|instanced|indexedinstanced|instancedindirect|indexedinstancedindirect)?|dispatch(?:indirect)?)\b'}, # there is also drawauto but it is not an lword, it's a standalone like the flow control keywords
    {name = "meta.keyword.lword keyword.other.ini.3dm.key-section", match = '(?i)\b(key|back|(?:release_)?delay|wrap|smart|(?:release_)?transition(?:_type)?)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.resource", match = '(?i)\b(filename|data|max_copies_per_frame|mode|(?:bind|misc)_flags|depth|mips|array|msaa(?:_quality)?|byte_width|stride)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.texture-override.resource-match", match = '(?i)\b(stereomode|expand_region_copy|deny_cpu_read|iteration)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.texture-override.vertex-limit", match = '(?i)\b(override_(?:byte_stride|vertex_count))\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.texture-override.draw-match", match = '(?i)\b(match_(?:(?:first_)?(?:vertex|index|instance)(?:_count)?))\b'}, # TODO: Make it required to have first or count
    {name = "meta.keyword.lword keyword.other.ini.3dm.texture-override.fuzzy-match", match = '(?i)\b(match_(?:type|usage|(?:bind|cpu_access|misc)_flags|(?:byte_)?width|height|stride|mips|format|depth|array|msaa(?:_quality)?))\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.custom-shader", match = '(?i)\b(flags|max_executions_per_frame|topology|sampler)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.custom-shader.blend-state", match = '(?i)\b((?:blend|alpha|mask)(?:\[([0-7])\])?|blend_factor\[([0-3])\]|alpha_to_coverage|sample_mask|blend_state_merge)\b', captures.2.name = "constant.numeric.ini.3dm", captures.3.name = "constant.numeric.ini.3dm"},
    {name = "meta.keyword.lword keyword.other.ini.3dm.custom-shader.depth-stencil-state", match = '(?i)\b(depth_(?:enable|write_mask|func|stencil_state_merge)|stencil_(?:enable|(?:read|write)_mask|front|back|ref))\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.custom-shader.rs-state", match = '(?i)\b(fill|cull|front|depth_(?:bias(?:_clamp)?|clip_enable)|slope_scaled_depth_bias|(?:depth_clip|scissor|multisample|antialiased_line)_enable|rasterizer_state_merge)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.shader-regex", match = '(?i)\b(shader_model|temps)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.shader-override", match = '(?i)\b((?:allow_duplicate_)hash|depth_filter|partner|model|disable_scissor)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.include", match = '(?i)\b((?:in|ex)clude(?:_recursive)?|user_config)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.logging", match = '(?i)\b(calls|input|debug(?:_locks)?|unbuffered|force_cpu_affinity|wait_for_debugger|crash|dump_all_profiles|show_warnings)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.hunting", match = '(?i)\b((?:done_|toggle_)?hunting|(?:next_)?marking_mode|marking_actions|mark_snapshot|(?:previous|next|mark)_(?:pixel|vertex|compute|geometry|domain|hull)shader|(?:previous|next|mark)_(?:index|vertex)buffer|(?:previous|next|mark)_rendertarget|take_screenshot|reload_fixes|(?:reload|wipe_user)_config|show_original|monitor_performance(?:_interval)?|repeat_rate|freeze_performance_monitor|verbose_overlay|tune_(?:enable|step)|tune[123]_(?:up|down)|analyse_frame|kill_deferred)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.system", match = '(?i)\b(proxy_d3d(?:9|11)|load_library_redirect|check_foreground_window|hook|allow_(?:check_interface|create_device|platform_update)|skip_early_includes_load|config_initialization_delay|settings_auto_save_interval)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.loader", match = '(?i)\b(target|module|require_admin|launch|delay|loader|check_version|entry_point|hook_proc|wait_for_target)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.device", match = '(?i)\b(upscaling|upscale_mode|(?:filter_)?refresh_rate|(?:toggle_)?full_screen|force_full_screen_on_key|force_stereo|allow_windowcommands|get_resolution_from|hide_cursor|cursor_upscaling_bypass)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.stereo", match = '(?i)\b(automatic_mode|unlock_(?:separation|convergence)|create_profile|surface(?:_square)?_createmode|force_no_nvapi)\b'},
    {name = "meta.keyword.lword keyword.other.ini.3dm.rendering", match = '(?i)\b(shader_hash|texture_hash|(?:override|cache|storage)_directory|cache_shaders|rasterizer_disable_scissor|track_texture_updates|(?:stereo|ini)_params|assemble_signature_comments|disassemble_undecipherable_custom_data|patch_assembly_cb_offsets|recursive_include|export_(?:fixed|shaders|hlsl|binary)|dump_usage|fix_(?:sv_position|ZRepair_.+|BackProjectionTransform\d|ObjectPosition\d(?:Multiplier)?|MatrixOperand\d(?:Multiplier)?|recompile_all_vs))\b'},
    {include = "#functional-keyword"},
    {include = "#variable"},
]

[repository.Lexpression]
name = "meta.structure.left-expression.ini.3dm"
match = '''(?i)((?:[\w ]+) +){0,2}([$\w\-.\\/@ '\[\]]+)'''
captures.1.patterns = [
    {name = "storage.modifier.ini.3dm", match = '(?i)(global|local|persist)(?= )'},
    {name = "keyword.control.ini.3dm", match = '(?i)(pre|post)(?= )'},
]
captures.2.patterns = [
    {include = "#functional-keyword"},
    {include = "#variable"},
    {include = "#constant"},
]

[repository.Rvalue]
patterns = [
    {include = "#operation"},
    {include = "#string"},
]

[repository.operation]
patterns = [
    # The order of these three is important. Some highlighting will break if operational comes before functional, or literal-list comes after operational.
    {include = "#functional-expression"},
    {include = "#literal-list"},
    {include = "#operational-expression"},
]

# This was named before I knew these should actually be Resource Access Modifiers
# and don't chain together like the possible values after `blend =` in a custom shader
[repository.functional-expression]
match = '''(?xi)\b
( copy(?:_desc(?:ription)?)? | ref(?:erence)? |
  raw | stereo | mono | stereo2mono | set_viewport |no_view_cache | resolve_msaa
)
\s+
([\w$][\w.\-\\@' \t/()]+)'''
name = "meta.expression.functional.ini.3dm"
captures.1.patterns = [{include = "#functional-keyword"}]
captures.2.patterns = [
    {include = "#variable"},
    {include = "#constant"},
]

[repository.literal-list]
match = '''(?i)\b(\w+)(?: +(\w+))+?'''
name = "meta.expression.literal-list.ini.3dm"
captures.1.patterns = [
    {include = "#constant"},
]
captures.2.patterns = [
    {include = "#constant"},
]

[repository.functional-keyword]
name = "meta.keyword.resource-usage-modifier keyword.other.functional.ini.3dm"
match = '(?i)\b(copy(?:_desc(?:ription)?)?|ref(?:erence)?|raw|stereo|mono|stereo2mono|set_viewport|no_view_cache|resolve_msaa)\b'

# An operational expression is meant to be a combination of a mathematical expression and a comparison expression
# we can do this because comparisons evaluate to either a 0 or a 1 and thus can be used in mathematical expressions
[repository.operational-expression]
patterns = [
    # Order is also important here. For example, illegal-operator must come before operator, both must come at the top, and round-braces must be last
    {include = "#illegal-operator"},
    {include = "#operator"},
    {include = "#variable"},
    {include = "#constant"},
    {include = "#round-braces"},
]

[[repository.illegal-operator.patterns]]
name = "invalid.illegal.operator.ini.3dm"
match = '(?xi) -{2,} | \+{2,} | \*{3,} | /{3,} | %{2,} | [><]={2,} | ! ={3,} | ={4,} | [><]{2,} | &{3,} | \|{3,} | \^+ '

[repository.operator]
# prevents / and = from being highlighted when specified as a key in a Key section;
# - too, but this character cannot be used already, 3dmigoto doesn't like it, you have to use the vk name or hex
# TODO: add the Lwords in the Hunting section, use a variable to do so
match = '''(?xi)
(?<! ^\s* (?:key|back) \s* = \s* .+)
(?:
  ( \*\* | \* | \+ | - | % | // | / ) |       # arithmetic operators
  ( !== | != | === | == | >= | <= | > | < ) | # comparison operators
  ( ! | && | \|\| )                           # logical operators
)'''
captures.1.name = "keyword.operator.math.ini.3dm"
captures.2.name = "keyword.operator.comparison.ini.3dm"
captures.3.name = "keyword.operator.logical.ini.3dm"

[repository.round-braces]
begin = '\('
beginCaptures.0.name = "punctuation.parenthesis.begin.ini.3dm"
end = '\)'
endCaptures.0.name = "punctuation.parenthesis.end.ini.3dm"
contentName = "meta.expression.operational.nested.ini.3dm"
patterns = [{include = "#operational-expression"}]

[[repository.variable.patterns]]
name = "variable.language.buffer.ini.3dm"
match = '\b(?i)(?<!\.)(?:[vhdgpc]s-cb\d{1,2}|vb\d|ib|(?:[rf]_)?bb)\b'

[[repository.variable.patterns]]
name = "variable.language.shader.ini.3dm"
match = '\b(?i)([pc]s-u\d|s?o\d|od|[vhdgpc]s(?:-t\d{1,3})?)\b'

[[repository.variable.patterns]]
name = "variable.parameter.ini.3dm"
match = '(?i)(?<![ \t]*(?:key|back)\s*=\s*.+)\b(?:(?<!$)[xyzw]\d{0,3})\b'

[[repository.variable.patterns]]
name = "variable.language.resource-identifiers.ini.3dm"
match = '\b(?i)(this|(?:ini|stereo)params|cursor_(?:mask|color))\b'

[[repository.variable.patterns]]
# constant instead of variable scope name because their use is more like language constants
name = "constant.language.override-parameters.ini.3dm"
match = '''(?xi)
\b(
  (?:rt|res|window)_(?:width|height) | (?:vertex|index|instance)_count | first_(?:vertex|index|instance) |
  thread_group_count_[xyz] | indirect_offset | draw_type | cursor_(?: showing | (?:screen_|window_|hotspot_)?[xy] ) |
  time | hunting | sli | frame_analysis | effective_dpi | (?:raw_|eye_)?separation | convergence |
  stereo_(?:active|available) | scissor_(?:left|top|right|bottom)
)\b'''

[[repository.variable.patterns]]
name = "meta.variable.ini.3dm"
#                  $          variable      or   \     namespace    \     variable
match = '''(?xi) (\$) (?: ([a-z_]\w+|[a-z])  |  (\\)([\w.@' \-\\]+)(\\) ([a-z_]\w+|[a-z]) )'''
# captures for a normal variable
captures.1.name = "punctuation.definition.variable.ini.3dm"
captures.2.name = "variable.other.readwrite.ini.3dm"
# captures for a namespaced variable
captures.3.name = "punctuation.separator.namespace.ini.3dm"
captures.4.name = "entity.name.namespace.ini.3dm"
captures.5.name = "punctuation.separator.namespace.ini.3dm"
captures.6.name = "variable.other.readwrite.ini.3dm"

[[repository.variable.patterns]]
name = "meta.function-call variable.other.function.ini.3dm"
#                        The prefixable section names I've seen in use              \     namespace    \      user-provided name
match = '''\b(?i)((?:BuiltIn)?(?:CommandList|CustomShader)|Resource|ShaderRegex)(?:(\\)([\w.@' \-\\]+)(\\))?([\w.]+)'''
captures.1.name = "entity.name.function.section-type.ini.3dm"
captures.2.name = "punctuation.separator.namespace.ini.3dm"
captures.3.name = "entity.name.namespace.ini.3dm"
captures.4.name = "punctuation.separator.namespace.ini.3dm"
captures.5.name = "entity.name.function.ini.3dm"

[repository.constant]
patterns = [
    {include = "#Rword"},
    {name = "constant.language.boolean.ini.3dm", match = '\b(?i)(?:true|false)\b'},
    {name = "constant.language.numeric.ini.3dm", match = '\b(?i)(?:null|inf|NaN)\b'},
    {name = "constant.other.path.ini.3dm", match = '''(?i)(?=.*[\\/]+)(?:(?:(?:[a-z]:|\.)[\\/])?[\w@&'\-.()]+(?:(?:\\|/)[\w@& '\-.()]+)+)'''},
    {name = "constant.other.file.ini.3dm", match = '''(?i)[\w@'\-.()]+\.(?=[a-z0-9]*[a-z]+)[a-z0-9]+'''},
    {name = "constant.numeric.ini.3dm", match = '\b\d+(?:\.\d+)?\b'},
]

[repository.Rword]
# constant scope if they only ever appear by themselves or with other rwords
# keyword scope if they mix with non-rword things
patterns = [
    {name = "meta.keyword.rword meta.keyword.multi-section constant.language.ini.3dm", match = '\b(?i)(none|skip|hold|mono|stereo|auto|depth_stencil|texturecube)\b'},
    {name = "meta.keyword.rword meta.keyword.commands constant.language.draw.ini.3dm", match = '\b(?i)(from_caller)\b'}, # auto is included above
    {name = "meta.keyword.rword meta.keyword.commands constant.language.handling.ini.3dm", match = '\b(?i)(abort)\b'}, # skip is included above
    {name = "meta.keyword.rword meta.keyword.commands constant.language.special.ini.3dm", match = '\b(?i)(upscaling_switch_bb|draw_3dmigoto_overlay)\b'},
    {name = "meta.keyword.rword meta.keyword.commands keyword.other.clear.ini.3dm", match = '\b(?i)(int|depth|stencil)\b'},
    {name = "meta.keyword.rword meta.keyword.commands constant.language.direct-mode-eye.ini.3dm", match = '\b(?i)(left|right)\b'}, # mono is included above
    {name = "meta.keyword.rword constant.language.shader-override.ini.3dm", match = '\b(?i)(overrule|depth_(?:(?:in)?active))\b'}, # none is included above | true,false are additional language constants handled elsewhere
    {name = "meta.keyword.rword meta.keyword.custom-shader constant.language.cull.ini.3dm", match = '\b(?i)(front|back)\b'},
    {name = "meta.keyword.rword meta.keyword.custom-shader constant.language.fill.ini.3dm", match = '\b(?i)(wireframe|solid)\b'},
    {name = "meta.keyword.rword meta.keyword.custom-shader constant.language.topology.ini.3dm", match = '\b(?i)(undefined|(point|line|triangle)_list|(line|triangle)_strip|(line|triangle)_(list|strip)_adj|[123]?\d_control_point_patch_list)\b'},
    {name = "meta.keyword.rword meta.keyword.custom-shader constant.language.compile-flag.ini.3dm", match = '\b(?i)(debug|skip_(validation|optimization)|pack_matrix_(row_major|column_major)|partial_precision|force_[vp]s_software_no_opt|no_preshader|(avoid|prefer)_flow_control|enable_(strictness|backwards_compatibility|unbounded_descriptor_tables)|ieee_strictness|optimization_level[0123]|warnings_are_errors|resources_may_alias|all_resources_bound)\b'},
    {name = "meta.keyword.rword meta.keyword.resource-usage-modifier keyword.other.functional.ini.3dm", match = '\b(?i)(unless_null)\b'},
    # This is where "meta.keyword.resource constant.language.resource-mode.ini.3dm" would go if all of its values weren't already in other sections: auto | mono | stereo
    {name = "meta.keyword.rword meta.keyword.resource constant.language.resource-type.ini.3dm", match = '\b(?i)((?:RW)?(?:Append|Consume)?StructuredBuffer|(?:RW)?(?:ByteAddress)?Buffer|(?:RW)?Texture[123]D)\b'}, # TextureCube is included above
    {name = "meta.keyword.rword meta.keyword.resource constant.language.bind-flag.ini.3dm", match = '\b(?i)((?:vertex|index|constant)_buffer|shader_resource|stream_output|render_target|unordered_access|decoder|video_encoder)\b'},
    {name = "meta.keyword.rword meta.keyword.resource constant.language.misc-flag.ini.3dm", match = '\b(?i)(generate_mips|shared|drawindirect_args|buffer_(?:allow_raw_views|structured)|resource_clamp|shared_(?:keymutex|nthandle)|gdi_compatible|restricted_content|restrict_shared_resource(?:_driver)?|guarded|tile_pool|tiled|hw_protected)\b'}, # texturecube is included above
    # Spot for "meta.keyword.rword meta.keyword.resource storage.type.dxgi-format.ini.3dm" if I decide it's worth it to put the LONG list of types in here
    {name = "meta.keyword.rword meta.keyword.blend-state keyword.operator.blend-operator.ini.3dm", match = '\b(?i)(add|(?:rev_)?subtract|min|max|disable)\b'}, #adding `disable` here even though it's not a blend op
    {name = "meta.keyword.rword meta.keyword.blend-state constant.language.blend-factor.ini.3dm", match = '\b(?i)(zero|one|(?:inv_)?(?:src1?|dest)_(?:color|alpha)|src_alpha_sat|(?:inv_)?blend_factor)\b'},
    {name = "meta.keyword.rword meta.keyword.keys constant.language.key-type.ini.3dm", match = '\b(?i)(activate|toggle|cycle)\b'}, # hold is included above
    {name = "meta.keyword.rword meta.keyword.keys constant.language.transition-type.ini.3dm", match = '\b(?i)(linear|cosine)\b'},
    {name = "meta.keyword.rword meta.keyword.keys keyword.other.modifier-key.ini.3dm", match = '\b(?i)(?:(?:no_)?(?:ctrl|alt|shift|windows)|no_modifiers)\b'},
    {name = "meta.keyword.rword meta.keyword.system constant.language.hook-option.ini.3dm", match = '\b(?i)(deferred_contexts|(?:immediate_)?context|device|all|recommended|except_set_(?:shader_resources|sampler|rasterizer_state)|skip_dxgi_(?:factory|device))\b'},
    {name = "meta.keyword.rword meta.keyword.device constant.language.resolution-source.ini.3dm", match = '\b(?i)(swap_chain)\b'}, # depth_stencil is included above
    {name = "meta.keyword.rword meta.keyword.rendering constant.language.shader-hash-type.ini.3dm", match = '\b(?i)(3dmigoto|embedded|bytecode)\b'},
    {name = "meta.keyword.rword meta.keyword.marking constant.language.marking-mode.ini.3dm", match = '\b(?i)(original|pink)\b'}, # skip,mono are included above
    {name = "meta.keyword.rword meta.keyword.marking constant.language.marking-action.ini.3dm", match = '\b(?i)(hlsl|asm|assembly|regex|ShaderRegex|clipboard|mono_snapshot|stereo_snapshot|snapshot_if_pink)\b'},
    {name = "meta.keyword.rword meta.keyword.analysis constant.language.analysis-option.ini.3dm", match = '\b(?i)(dump_(?:rt|depth|tex|[cvi]b)|jp(?:s|e?g)|(?:jp(?:s|e?g)_)?dds|buf|txt|desc|clear_rt|persist|filename_(?:reg|handle)|log|dump_on_(?:unmap|update)|deferred_ctx_(?:immediate|accurate)|share_dupes|symlink|dump_(?:rt|depth|tex)_(?:jps|dds)|dump_[cvi]b_txt)\b'}, # hold,stereo,mono are included above
]

[repository.string]
name = "string.quoted.double.ini.3dm"
begin = '"'
end = '"'
