{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.regexp",
  "name": "PCRE2",
  "patterns": [
    {
      "include": "#base"
    },
    {
      "include": "#base-extended"
    }
  ],
  "repository": {
    "base": {
      "patterns": [
        {
          "include": "#group-modifiers"
        },
        {
          "include": "#group-comment"
        },
        {
          "include": "#group"
        },
        {
          "include": "#base-common"
        }
      ]
    },
    "base-extended": {
      "patterns": [
        {
          "include": "#group-modifiers"
        },
        {
          "include": "#group-comment"
        },
        {
          "include": "#group-extended"
        },
        {
          "include": "#base-common"
        }
      ]
    },
    "base-extended-nested": {
      "patterns": [
        {
          "include": "#group-modifiers"
        },
        {
          "include": "#group-comment"
        },
        {
          "include": "#group-extended"
        },
        {
          "include": "#extended-patterns"
        },
        {
          "include": "#base-common"
        }
      ]
    },
    "base-common": {
      "patterns": [
        {
          "include": "#character-class"
        },
        {
          "include": "#anchor"
        },
        {
          "include": "#backref"
        },
        {
          "include": "#switch"
        },
        {
          "include": "#char-escape"
        },
        {
          "include": "#operator"
        }
      ]
    },
    "group-modifiers": {
      "match": "(\\()(\\?([imsUJn]+|[imsUJn]*(-)[imsUJn]+))(\\))",
      "name": "meta.group.modifiers.regexp",
      "captures": {
        "1": {
          "name": "punctuation.definition.modifier-group.begin.regexp"
        },
        "2": {
          "name": "keyword.other.group.modifiers.regexp"
        },
        "3": {
          "name": "storage.modifier.mode.regexp"
        },
        "4": {
          "name": "puntuation.separator.unset.regexp"
        },
        "5": {
          "name": "punctuation.definition.modifier-group.end.regexp"
        }
      }
    },
    "group-comment": {
      "match": "(\\(\\?#)(.*)(\\))",
      "name": "meta.group.comment.regexp",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.begin.regexp"
        },
        "2": {
          "name": "comment.block.group.regexp"
        },
        "3": {
          "name": "punctuation.definition.comment.end.regexp"
        }
      }
    },
    "group-special": {
      "patterns": [
        {
          "match": "\\(\\*(PRUNE|SKIP|THEN|COMMIT|FAIL|ACCEPT|(?:MARK)?:[A-Z0-9_]+)\\)",
          "name": "meta.group.control.regexp keyword.control.verb.regexp"
        },
        {
          "match": "\\(\\*(UTF(?:8|16|32)?|UCP|CR|LF|(?:ANY)?CRLF|ANY|NOTEMPTY(?:_ATSTART)?|NO_JIT|BSR_(?:ANYCRLF|UNICODE)|NO_AUTO_POSSESS|NO_START_OPT)\\)",
          "name": "meta.group.control.regexp keyword.control.modifier.regexp"
        },
        {
          "match": "(\\()(\\?(?:([+-]?\\d+)|P=(\\w+)))(\\))",
          "name": "meta.group.back-reference.regexp",
          "captures": {
            "1": {
              "name": "punctuation.section.group.begin.regexp"
            },
            "2": {
              "name": "keyword.other.group.backref.regexp"
            },
            "3": {
              "name": "constant.numeric.backref.regexp"
            },
            "4": {
              "name": "entity.name.function.backref.regexp"
            },
            "5": {
              "name": "punctuation.section.group.end.regexp"
            }
          }
        },
        {
          "match": "(\\()(\\?(?:R|(?:&|P>)(\\w+)))(\\))",
          "name": "meta.group.recursion.regexp",
          "captures": {
            "1": {
              "name": "punctuation.section.group.begin.regexp"
            },
            "2": {
              "name": "keyword.other.group.recursion.regexp"
            },
            "3": {
              "name": "entity.name.function.capture-group.regexp"
            },
            "4": {
              "name": "punctuation.section.group.end.regexp"
            }
          }
        }
      ]
    },
    "group": {
      "patterns": [
        {
          "include": "#group-special"
        },
        {
          "begin": "(\\()(\\?([imsUJn]+|[imsUJn]*(-)[imsUJn]+):)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.group.begin.regexp"
            },
            "2": {
              "name": "storage.modifier.mode.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.regexp"
            }
          },
          "name": "meta.group.local-modifiers.regexp",
          "contentName": "meta.mode.basic.regexp",
          "patterns": [
            {
              "include": "#base"
            }
          ]
        },
        {
          "begin": "(\\()(?:(\\?<?[=!])|(\\?[:>])|(\\?\\|)|(\\?\\(DEFINE\\)))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.group.begin.regexp"
            },
            "2": {
              "name": "keyword.other.lookaround.regexp"
            },
            "3": {
              "name": "keyword.other.non-capturing.regexp"
            },
            "4": {
              "name": "keyword.other.non-incrementing.regexp"
            },
            "5": {
              "name": "keyword.other.definition.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.regexp"
            }
          },
          "name": "meta.group.assertion.regexp",
          "contentName": "meta.mode.basic.regexp",
          "patterns": [
            {
              "include": "#base"
            }
          ]
        },
        {
          "begin": "(\\()(?:(\\?(?:'\\w+'|P?<\\w+>))|(?!\\?))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.group.begin.regexp"
            },
            "2": {
              "name": "entity.name.function.capture-group.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.regexp"
            }
          },
          "name": "meta.group.capture-group.regexp",
          "contentName": "meta.mode.basic.regexp",
          "patterns": [
            {
              "include": "#base"
            }
          ]
        }
      ]
    },
    "group-extended": {
      "patterns": [
        {
          "include": "#group-special"
        },
        {
          "begin": "(\\()(\\?([imsUJn]*xx?[imsUJn]*|[imsUJn]*xx?[imsUJn]*(-)[imsUJn]+))(\\))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.modifier-group.begin.regexp"
            },
            "2": {
              "name": "keyword.other.group.modifiers.regexp"
            },
            "3": {
              "name": "storage.modifier.mode.regexp"
            },
            "4": {
              "name": "punctuation.separator.unset.regexp"
            },
            "5": {
              "name": "punctuation.definition.modifier-group.end.regexp"
            }
          },
          "end": "(?:(\\()(\\?([imsUJn]*(-)[imsUJn]*xx?[imsUJn]*))(\\))|\\z)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.modifier-group.begin.regexp"
            },
            "2": {
              "name": "keyword.other.group.modifiers.regexp"
            },
            "3": {
              "name": "storage.modifier.mode.regexp"
            },
            "4": {
              "name": "punctuation.separator.unset.regexp"
            },
            "5": {
              "name": "punctuation.definition.modifier-group.end.regexp"
            }
          },
          "name": "meta.group.modifiers.regexp",
          "contentName": "meta.mode.extended.regexp",
          "patterns": [
            {
              "include": "#base-extended-nested"
            }
          ]
        },
        {
          "begin": "(\\()(\\?([imsUJn]*xx?[imsUJn]*|[imsUJn]*xx?[imsUJn]*(-)[imsUJn]+):)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.group.begin.regexp"
            },
            "2": {
              "name": "keyword.other.group.modifiers.regexp"
            },
            "3": {
              "name": "storage.modifier.mode.regexp"
            },
            "4": {
              "name": "punctuation.separator.unset.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.regexp"
            }
          },
          "name": "meta.group.local-modifiers.regexp",
          "contentName": "meta.mode.extended.regexp",
          "patterns": [
            {
              "include": "#base-extended-nested"
            }
          ]
        },
        {
          "begin": "(\\()(?:(\\?<?[=!])|(\\?[:>])|(\\?\\|))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.group.begin.regexp"
            },
            "2": {
              "name": "keyword.other.lookaround.regexp"
            },
            "3": {
              "name": "keyword.other.non-capturing.regexp"
            },
            "4": {
              "name": "keyword.other.non-incrementing.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.regexp"
            }
          },
          "name": "meta.group.assertion.regexp",
          "contentName": "meta.mode.extended.regexp",
          "patterns": [
            {
              "include": "#base-extended-nested"
            }
          ]
        },
        {
          "begin": "(\\()(?:(\\?(?:'\\w+'|P?<\\w+>))|(?!\\?))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.group.begin.regexp"
            },
            "2": {
              "name": "entity.name.function.capture-group.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.regexp"
            }
          },
          "name": "meta.group.capture-group.regexp",
          "contentName": "meta.mode.extended.regexp",
          "patterns": [
            {
              "include": "#base-extended-nested"
            }
          ]
        }
      ]
    },
    "extended-patterns": {
      "patterns": [
        {
          "begin": "\\#+",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.regexp"
            }
          },
          "end": "\\n",
          "contentName": "comment.line.number-sign.regexp"
        },
        {
          "match": "(?<!\\\\)\\s+",
          "name": "meta.ignored-whitespace.regexp"
        }
      ]
    },
    "character-class": {
      "patterns": [
        {
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.begin.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(?<!:)(\\])",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.character-class.end.regexp"
            }
          },
          "patterns": [
            {
              "include": "#posix-class"
            },
            {
              "match": "\\\\[\\\\\\^\\-\\[\\]b]",
              "name": "constant.character.escape.character-set.regexp"
            },
            {
              "match": "(?<!\\\\)-",
              "name": "punctuation.separator.sequence.regexp"
            },
            {
              "include": "#char-escape"
            }
          ]
        }
      ]
    },
    "posix-class": {
      "match": "\\[:(?:ascii|alnum|alpha|blank|cntrl|digit|graph|lower|print|punct|space|upper|word|xdigit|[><]):\\]",
      "name": "constant.other.posix-class.regexp"
    },
    "anchor": {
      "match": "\\\\[GAZzBb]|[\\^$]",
      "name": "keyword.control.anchor.regexp"
    },
    "backref": {
      "patterns": [
        {
          "match": "\\\\([1-9](?:\\d|\\d{3,})?)",
          "name": "keyword.other.backref.regexp"
        },
        {
          "match": "\\\\(?:g(?:\\d+|\\{-?\\d+\\}|[<']\\+?\\d+['>]|[{<']\\w+['>}])|k[{<']\\w+['>}])",
          "name": "keyword.other.backref.regexp"
        }
      ]
    },
    "switch": {
      "patterns": [
        {
          "match": "\\\\K",
          "name": "keyword.control.reset.regexp"
        },
        {
          "begin": "\\\\Q",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.literal.regexp"
            }
          },
          "end": "\\\\E",
          "endCaptures": {
            "0": {
              "name": "keyword.control.literal.regexp"
            }
          },
          "name": "meta.string-literal.regexp",
          "contentName": "string.quoted.other.regexp"
        }
      ]
    },
    "char-escape": {
      "patterns": [
        {
          "match": "(?:(\\\\[wWsSdDhHvVXRCN])|(\\\\[0-7]{3}))",
          "name": "meta.structure.meta-sequence.regexp",
          "captures": {
            "1": {
              "name": "constant.character.escape.character-class.regexp"
            },
            "2": {
              "name": "constant.character.numeric.regexp"
            }
          }
        },
        {
          "match": "(?:(\\\\[pP](?:\\{\\w+\\}|[CLMNPSZ]))|(\\\\x\\{[0-9a-fA-F]{4}\\}|\\\\x[0-9a-fA-F]{2})|(\\\\c[A-Z]))",
          "name": "meta.structure.prefixed-meta-sequence.regexp",
          "captures": {
            "1": {
              "name": "constant.character.escape.unicode-property.regexp"
            },
            "2": {
              "name": "constant.character.numeric.regexp"
            },
            "3": {
              "name": "constant.character.escape.control.regexp"
            }
          }
        },
        {
          "match": "\\\\[ntr0]",
          "name": "meta.structure.common-escapes.regexp constant.character.escape.common.regexp"
        },
        {
          "match": "\\\\.",
          "name": "constant.character.escape.backslash.regexp"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "match": "\\|",
          "name": "keyword.operator.or.regexp"
        },
        {
          "match": "\\.",
          "name": "keyword.operator.any.regexp"
        },
        {
          "match": "(?:[?*+]|\\{\\d+(?:,\\d*)?\\})[?+]?",
          "name": "keyword.operator.quantifier.regexp"
        }
      ]
    }
  }
}